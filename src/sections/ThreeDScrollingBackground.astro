<div id="threedscrolling" class="overflow-hidden">
  <canvas id="webglCanvas" class="z-60 w-full h-screen fixed bg-cover bg-center"></canvas>
  <slot />
</div>

<script>
  const keyframes = {
    offScreen: {
      position: {
        x: 0,
        y: 0,
        z: 0,
      },
      rotation: {
        x: 0,
        y: 0,
        z: 0,
      },
    },
    hero: {
      position: {
        x: -1.453,
        y: -99,
        z: 40,
      },
      rotation: {
        x: 3.1,
        y: -0.87,
        z: 0,
      },
    },
    aboutMe: {
      position: {
        x: -4.283,
        y: -100,
        z: 100,
      },
      rotation: {
        x: 3.1,
        y: -0.015,
        z: 0,
      },
    },
    works: {
      position: {
        x: -30.76,
        y: -100,
        z: 42.033,
      },
      rotation: {
        x: 3.1,
        y: -1.97,
        z: 0,
      },
    },
    contactMe: {
      position: {
        x: -4.153,
        y: -105.6,
        z: 119.35,
      },
      rotation: {
        x: 3.32,
        y: -0.87,
        z: 0,
      },
    },
  }

  import { GUI } from "dat.gui"
  import * as THREE from "three"
  import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js"

  import gsap from "gsap"
  import { ScrollTrigger } from "gsap/ScrollTrigger"
  gsap.registerPlugin(ScrollTrigger)

  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000)
  camera.position.set(0, 0, 215)

  const canvasEl = document.getElementById("webglCanvas")
  const renderer = new THREE.WebGLRenderer({ camera, canvas: canvasEl, alpha: true })
  renderer.setSize(window.innerWidth, window.innerHeight)

  const ambientLight = new THREE.AmbientLight(0xad947f, 4)
  scene.add(ambientLight)

  const pointLight = new THREE.PointLight(0xff00ff, 1200)
  scene.add(pointLight)
  pointLight.position.set(22.213, -16.38, 106.12)
  pointLight.decay = 2

  // Instantiate a loader
  const loader = new GLTFLoader()

  function animate() {
    requestAnimationFrame(animate)
    renderer.render(scene, camera)
  }

  async function initScene() {
    const SceneObject = await loader.loadAsync("/asset/model/head_of_david.glb")
    const loadedModel = await SceneObject.scene.children[0]
    loadedModel.scale.set(1, 1, 1)

    // Add Loaded model to scene
    scene.add(loadedModel)

    function renderGUI(model) {
      const gui = new GUI()
      const positionFolder = gui.addFolder("Model Position")
      positionFolder.add(model.position, "x", -200, 200, 0.0005)
      positionFolder.add(model.position, "y", -200, 200, 0.0005)
      positionFolder.add(model.position, "z", -200, 200, 0.0005)
      positionFolder.open()

      const rotationFolder = gui.addFolder("Model Rotation")
      rotationFolder.add(model.rotation, "x", -10, 10, 0.005)
      rotationFolder.add(model.rotation, "y", -10, 10, 0.005)
      rotationFolder.add(model.rotation, "z", -10, 10, 0.005)
      rotationFolder.open()
    }

    const tl = gsap.timeline()

    function initialAnimation() {
      tl.fromTo(
        loadedModel.position,
        {
          x: keyframes.offScreen.position.x,
          y: keyframes.offScreen.position.y,
          z: keyframes.offScreen.position.z,
        },
        {
          duration: 1,
          x: keyframes.hero.position.x,
          y: keyframes.hero.position.y,
          z: keyframes.hero.position.z,
        }
      )

      tl.fromTo(
        loadedModel.rotation,
        {
          x: keyframes.offScreen.rotation.x,
          y: keyframes.offScreen.rotation.y,
          z: keyframes.offScreen.rotation.z,
        },
        {
          duration: 1,
          x: keyframes.hero.rotation.x,
          y: keyframes.hero.rotation.y,
          z: keyframes.hero.rotation.z,
        }
      )
    }

    function CreateFromToAnimation(keyframeFrom, keyFrameTo, trigger) {
      tl.fromTo(
        loadedModel.position,
        {
          x: keyframeFrom.position.x,
          y: keyframeFrom.position.y,
          z: keyframeFrom.position.z,
        },
        {
          x: keyFrameTo.position.x,
          y: keyFrameTo.position.y,
          z: keyFrameTo.position.z,
          scrollTrigger: {
            trigger,
            start: "top center",
            end: "center center",
            scrub: 1.4,
          },
        }
      )

      tl.fromTo(
        loadedModel.rotation,
        {
          x: keyframeFrom.rotation.x,
          y: keyframeFrom.rotation.y,
          z: keyframeFrom.rotation.z,
        },
        {
          x: keyFrameTo.rotation.x,
          y: keyFrameTo.rotation.y,
          z: keyFrameTo.rotation.z,
          scrollTrigger: {
            trigger,
            start: "top center",
            end: "center center",
            scrub: 1.4,
          },
        }
      )
    }

    tl.to("#heroBg", {
      opacity: 0,
      scrollTrigger: {
        trigger: "#Hero",
        start: "bottom center",
        end: "bottom top",
        scrub: 1,
      },
    })

    tl.from(".about-me-text", {
      stagger: 0.15,
      opacity: 0,
      xPercent: 100,
      scrollTrigger: {
        trigger: "#AboutMe",
        start: "top center",
        end: "center center",
        scrub: 1,
      },
    })

    initialAnimation()
    CreateFromToAnimation(keyframes.hero, keyframes.aboutMe, "#AboutMe")
    CreateFromToAnimation(keyframes.aboutMe, keyframes.works, "#Works")
    CreateFromToAnimation(keyframes.works, keyframes.contactMe, "#ContactMe")
  }

  initScene().then(animate)
</script>
